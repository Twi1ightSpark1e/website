# Access Control Lists section, optional.
#
# Contains named addresses/subnets, used to restrict access to various site resources.
# An empty list of addresses/subnets restricts access for everyone.
acl:
  rproxy:
    - 192.168.0.128
    - fe80::dead:beef:1234:5678
  local:
    - 192.168.0.0/16
  any:
    - 0.0.0.0/0
    - ::/0
  none:

# Authentication section, optional.
#
# Contains pairs "username: password" to restrict access to public resources to authorized users.
# What can be used as a password:
#   - plaintext, will be bcrypt-ed on next server start;
#   - bcrypt hash, will be used as is.
auth:
  testuser1: testpasswd
  testuser2: helloworld

# Web server listening IP:Port pairs, required.
# IP address may be omitted to listen any address (both v4 and v6, if supported).
listen:
  - :8081

# Reverse proxy settings. Optional but highly recommended for security reasons.
#
# If no reverse proxy used, recommended settings are: policy: ignore, whitelist: - none.
# Otherwise recommended to use: policy: error, whitelist: - rproxy.
reverseproxy:
  # How to treat `X-Real-Ip` and `X-Forwarded-For` headers from not whitelisted clients. Required.
  # Valid values are:
  #   - `error` - throw error code 400 when at least one of above headers provided;
  #   - `ignore` - do not use above headers to get real client address.
  policy: error
  # List of clients that are allowed to set up `X-Real-Ip` and `X-Forwarded-For` headers. Required.
  whitelist:
    - rproxy

# Log files, optional. Accesses and errors will be written to stdout and stderr if omitted.
log:
  # File for successful (code < 400) requests logging.
  access: /home/twilight/web/access.log
  # Fire for wrong (code >= 400) requests logging.
  error: /home/twilight/web/error.log

paths:
  # Base working directory, required
  base: "/mnt"
  # Directory with templates path (absolute or relative), required.
  templates: "template/"

# Handlers section, optional.
#
# Contains configuration for various handlers. Currently supported:
#   - `fileindex`, optional;
#   - `graphviz`, optional;
#   - `webhook`, optional;
#   - `markdown`, optional;
#   - `cards`, optional.
#
# Special endpoint name `index` is used to set up handler for main page.
handlers:
  # Fileindex handler.
  #
  # Displays table of files inside a directory. Hidden names are not shown but available. Options:
  #   - `hide` - an array of patterns that must be hidden from index, optional.
  fileindex:
    hide:
      # Entry options:
      #   - `regex` - RE2-compatible string. The file/directory whose path matches this value will be hidden. Required.
      #   - `exclude` - list of clients who will be able to see hidden entries anyway. Optional, none by default.
      - regex: "/noindex/"
        exclude: local
    endpoints:
      # Endpoint options:
      #   - `auth` - list of users that are allowed to see endpoint content. Optional, allowed for everyone by default;
      #   - `view` - list of clients that are allowed to see endpoint content. Optional, forbidden for everyone by default;
      #   - `upload` - list of clients that are allowed to upload files here. Optional, forbidden for everyone by default.
      #   - `preview` - position of markdown preview. Optional, no preview shown by default. Valid values are:
      #     - "" - do not show preview;
      #     - `pre` - show preview before filetable;
      #     - `post` - show preview after filetable.
      files-test:
        view: local
        auth:
          - testuser1
          - testuser2
        upload: local
        preview: post
  # Graphviz handler.
  #
  # Receives 'dot'-compatible data on PUT requests, returns graph drawn as SVG.
  graphviz:
    endpoints:
      # Endpoint options:
      #   - `decoration` - name of decoration preset. Possible values are: `none`, `tinc`. Optional, default is `none`.
      #   - `view` - list of clients that are allowed to see endpoint content. Optional, forbidden for everyone by default;
      #   - `edit` - list of clients that are allowed to perform PUT and DELETE requests. Optional, forbidden for everyone by default.
      graph:
        decoration: tinc
        view: any
        edit: local
  # Webhook handler.
  #
  # When valid request received, executes specified command.
  webhook:
    endpoints:
      # Endpoint options:
      #   - `view` - list of clients that are allowed to use webhook. Optional, forbidden for everyone by default;
      #   - `method` - valid case-insesetive HTTP method name, others will fail. Optional, everything is allowed by default;
      #   - `headers` - case-sensetive headers that are must be present in request. Optional, will not check headers if empty;
      #   - `exec` - command line for application that will be executed on valid request. Will receive request body in stdin. Required.
      testhook:
        view: any
        method: post
        headers:
          Content-Type: application/json
          X-Gitlab-Token: somerandomstring
        exec: /usr/local/bin/hook.sh testhook
  # Markdown handler.
  #
  # Render markdown file.
  markdown:
    endpoints:
      # Endpoint options:
      #   - `view` - list of clients that are allowed to view file. Optional, forbidden for everyone by default;
      readme.md:
        view: any
  # Cards handler.
  #
  # Display predefined cards.
  cards:
    endpoints:
      # Endpoint options:
      #   - `view` - list of clients that are allowed to use webhook. Optional, forbidden for everyone by default;
      #   - `content` - list of predefined cards. Optional, empty by default.
      index:
        view: any
        content:
          # Every card consists of following options:
          #   - `title`, required;
          #   - `description`, required;
          #   - `view` - list of clients that are allowed to see card. Optional, forbidden for everyone by default;
          #   - `links` - an array of card links, required.
          - title: "Test file storage"
            description: "Testing file storage index"
            view: local
            links:
              - title: "Link"
                address: "files-test/"
          - title: "Card with two links"
            description: "Testing cards ability to show multiple links"
            view: any
            links:
              - title: "First"
                address: "/"
              - title: "Second"
                address: "/"
